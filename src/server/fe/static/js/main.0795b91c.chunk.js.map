{"version":3,"sources":["components/Header.js","api.js","Contexts.js","components/Login.js","components/ConfigForm.js","components/testData.js","components/Table.js","components/Dashboard.js","components/AddDataToDBTable.js","components/RowEditor.js","components/RowCreator.js","components/Error.js","App.js","hooks/useToken.js","hooks/useDBConfig.js","reportWebVitals.js","index.js"],"names":["logout","e","console","log","preventDefault","localStorage","removeItem","window","location","replace","resetConfig","expiryTime","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","getItem","onClick","api","token","JSON","parse","base64decoded","atob","split","exp","isTokenExpired","Date","now","valueOf","a","fetch","headers","then","data","json","loginUser","credentials","method","body","stringify","setConfig","config","tableName","readData","pageNum","undefined","newData","newRow","updateData","oldRow","removeRow","rowDetail","FormContext","createContext","ErrorContext","errorMessage","setErrorMessage","clearError","Login","setToken","useState","username","setUserName","password","setPassword","useContext","handleSubmit","error","Container","Card","Body","Form","Group","Label","Control","type","placeholder","onChange","target","value","controlId","Button","dbtypes","ConfigForm","setDBConfig","dbConfig","url","setURL","port","setPort","db_name","setDBName","db_type","setDBType","useEffect","res","origin","defaultValue","as","custom","map","option","idx","testData","Row","props","history","useHistory","handleClick","push","pathname","content","index","Table","tableData","setTableData","rowsSelected","setRowsSelected","show","setShow","deleteType","useRef","currentRow","handleClose","handleShow","deleteRow","row","current","deleteAllRows","removeAllRows","deleteSelectedRows","getKeys","metadata","meta","name","style","marginTop","striped","bordered","hover","keys","key","getHeader","rows","newRowsSelected","oldRowsSelected","checked","concat","filter","updateRowsSelected","getRowsData","Modal","onHide","closeButton","Title","Footer","pages","parseInt","Pagination","Prev","i","Item","mid","Math","floor","Ellipsis","mid1","mid2","Next","getPagination","defaultProps","Dashboard","tables","setTableName","setPageNum","checkServerLife","params","match","fluid","Col","xs","activeKey","curr","InputTextField","maxLength","required","handleChange","size","event","Checkbox","TextAreaField","AddToDBTable","elements","setElements","table","fetchMetaData","handleSave","forEach","message","createData","elementToChange","newElements","element","useMemo","Provider","column","inputField","formType","toLowerCase","includes","getMaxLength","nullable","htmlFor","default","comment","RowEditor","AddDataToDBTable","RowCreator","Error","Alert","onClose","dismissible","Heading","App","tokenString","userToken","getToken","setItem","useToken","dbConfigString","getDBConfig","useDBConfig","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0795b91c.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nfunction logout(e) {\n    console.log(\"inside logout function\")\n    if(e)\n        e.preventDefault()\n    localStorage.removeItem(\"token\");\n    window.location.replace('/')\n}\n\nfunction resetConfig(e) {\n    if(e)\n        e.preventDefault()\n    localStorage.removeItem(\"dbConfigured\");\n    window.location.replace('/')\n}\n\nconst Header = () => {\n    \n    return (\n        <div>\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#\">C H A T H U R A M</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href=\"/dashboard\">Dashboard</Nav.Link>\n                        { localStorage.getItem(\"token\") && <Nav.Link onClick={logout}>Logout</Nav.Link>}\n                        { localStorage.getItem(\"dbConfig\") && <Nav.Link onClick={resetConfig}>Reset Config</Nav.Link>}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport {\n    logout,\n    Header,\n}\n","import { logout } from \"./components/Header\";\n\nconst api = \"http://127.0.0.1:5000\"\n\nconst token = JSON.parse(localStorage.getItem(\"token\"))?.token\nlet expiryTime;\nif (token) {\n    const base64decoded = atob(token.split(\".\")[1])\n    expiryTime = JSON.parse(base64decoded).exp\n}\n\n\nconst isTokenExpired = () => {\n    const currentTime = Date.now().valueOf() / 1000\n    if (currentTime > expiryTime) {\n        console.log(\"ERROR: Token expired\")\n        logout()\n    }\n}\n\nexport async function checkServerLife() {\n    return fetch(`${api}/life`, {\n        headers: {\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        }\n    }).then(data => data.json())\n}\n\nexport async function loginUser(credentials) {\n    return fetch(`${api}/login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n    }).then(data => data.json())\n}\n\nexport async function setConfig(config) {\n    isTokenExpired()\n    return fetch(`${api}/config`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify(config)\n    }).then(data => data.json())\n}\n\nexport async function fetchMetaData(tableName) {\n    isTokenExpired()\n    return fetch(`${api}/meta`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify(tableName)\n    }).then(data => data.json())\n}\n\nexport async function getTablesList() {\n    isTokenExpired()\n    return fetch(`${api}/tables`, {\n        headers: {\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n    }).then(data => data.json())\n}\n\nexport async function readData(tableName, pageNum) {\n    if (pageNum === null || pageNum === undefined) {\n        pageNum = 1\n    }\n    isTokenExpired()\n    return fetch(`${api}/read`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify({ \"table\": tableName, \"pageNum\": pageNum })\n    }).then(data => data.json())\n}\n\nexport async function createData(newData) {\n    isTokenExpired()\n    return fetch(`${api}/create`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify({\n            \"table\": newData.tableName,\n            \"row\": newData.newRow\n        })\n    }).then(data => data.json())\n}\n\nexport async function updateData(updateData) {\n    isTokenExpired()\n    return fetch(`${api}/update`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify({\n            \"table\": updateData.tableName,\n            \"row\": updateData.newRow,\n            'old_row': updateData.oldRow\n        })\n    }).then(data => data.json())\n}\n\nexport async function removeRow(rowDetail) {\n    isTokenExpired()\n    return fetch(`${api}/delete`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify(rowDetail)\n    }).then(data => data.json())\n}\n\nexport async function removeAllRows(tableName) {\n    isTokenExpired()\n    return fetch(`${api}/delete_all`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"x-access-token\": JSON.parse(localStorage.getItem('token')).token\n        },\n        body: JSON.stringify({ \"table\": tableName })\n    }).then(data => data.json())\n}","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);\r\nexport const ErrorContext = createContext({\r\n    errorMessage: '',\r\n    setErrorMessage: () => { },\r\n    clearError: () => { }\r\n});","import React, { useState, useContext } from 'react';\nimport { loginUser } from '../api';\nimport { ErrorContext } from '../Contexts';\nimport { Form, Button, Container, Card } from 'react-bootstrap';\nimport { Header } from './Header';\nimport '../css/forms.css'\n\n\nconst Login = ({ setToken }) => {\n    const [username, setUserName] = useState();\n    const [password, setPassword] = useState();\n    const { errorMessage, setErrorMessage, clearError } = useContext(ErrorContext)\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        clearError()\n        const token = await loginUser({\n            username,\n            password\n        });\n        if (token.error) {\n            setErrorMessage(token.error)\n        }\n        else {\n            setToken(token);\n        }\n    }\n\n    return (\n        <div>\n            <Header />\n            <Container>\n                <Card>\n                    <Card.Body>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\n                            </Form.Group>\n\n                            <Button variant=\"light\" type=\"submit\" onClick={handleSubmit} className=\"full-btn\">\n                                S U B M I T\n                            </Button>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </Container>\n\n        </div>\n\n    );\n}\n\n\nexport default Login;","import React, { useState, useContext, useEffect } from 'react';\nimport { setConfig } from '../api';\nimport { Form, Button, Container, Card } from 'react-bootstrap';\nimport { Header } from './Header';\nimport { ErrorContext } from '../Contexts';\nimport '../css/forms.css'\n\nconst dbtypes = ['mysql', 'postgres'];\n\nconst ConfigForm = ({ setDBConfig, dbConfig }) => {\n    const [username, setUserName] = useState();\n    const [password, setPassword] = useState();\n    const [url, setURL] = useState();\n    const [port, setPort] = useState();\n    const [db_name, setDBName] = useState();\n    const [db_type, setDBType] = useState(dbtypes[0]);\n\n    const { errorMessage, setErrorMessage, clearError } = useContext(ErrorContext)\n\n    useEffect(() => {\n        if (dbConfig) {\n            setUserName(dbConfig?.username);\n            setURL(dbConfig?.url);\n            setPort(dbConfig?.port);\n            setDBType(dbConfig?.db_type);\n            setDBName(dbConfig?.db_name);\n        }\n    }, [dbConfig]);\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        clearError()\n        console.log(username, password, url, port, db_name, db_type);\n        const res = await setConfig({\n            username,\n            password,\n            url,\n            port,\n            db_name,\n            db_type\n        });\n        if (res.error) {\n            setErrorMessage(res.error)\n        }\n        else {\n            setDBConfig({\n                username,\n                url,\n                port,\n                db_name,\n                db_type,\n                ...res\n            });\n            // Redirect to dashboard on successfully establishing DB connection\n            window.location.replace(`${window.location.origin}/dashboard`)\n        }\n    }\n\n    return (\n        <div>\n            <Header />\n            <Container>\n                <Card>\n                    <Card.Body>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter username\" defaultValue={dbConfig?.username} onChange={e => setUserName(e.target.value)} />\n                            </Form.Group>\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\n                            </Form.Group>\n                            <Form.Group controlId=\"formURL\">\n                                <Form.Label>DB URL</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter DB URL\" defaultValue={dbConfig?.url} onChange={e => setURL(e.target.value)} />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Port</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter port\" defaultValue={dbConfig?.port} onChange={e => setPort(e.target.value)} />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>DB Name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter DB Name\" defaultValue={dbConfig?.db_name} onChange={e => setDBName(e.target.value)} />\n                            </Form.Group>\n                            <Form.Group controlId=\"exampleForm.SelectCustom\">\n                                <Form.Label>DB Type</Form.Label>\n                                <Form.Control as=\"select\" defaultValue={dbConfig ? dbConfig.db_type : dbtypes[0]} custom onChange={e => setDBType(e.target.value)}>\n                                    {dbtypes.map((option, idx) => <option key={idx} value={option}>{option}</option>)}\n                                </Form.Control>\n                            </Form.Group>\n                            <Button variant=\"light\" type=\"submit\" onClick={handleSubmit} className=\"full-btn\">\n                                S U B M I T\n                            </Button>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </Container>\n        </div>\n    );\n}\n\nexport default ConfigForm;","const testData = [\r\n    {\r\n        \"id\": 1,\r\n        \"firstname\": \"abc\",\r\n        \"lastname\": \"xyz\",\r\n        \"phone\": \"+91 789654123\",\r\n        \"email\": \"abcyz@gmail.com\"\r\n    },\r\n\r\n    {\r\n        \"id\": 2,\r\n        \"firstname\": \"def\",\r\n        \"lastname\": \"uvz\",\r\n        \"phone\": \"+91 123456987\",\r\n        \"email\": \"defvu@gmail.com\"\r\n    }\r\n];\r\n\r\nexport default testData;","import React, { useEffect, useState, useContext, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport testData from './testData';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport { Container, Pagination, Button, Modal } from 'react-bootstrap';\nimport Delete from '@material-ui/icons/Delete';\nimport { readData, removeAllRows, removeRow } from '../api';\nimport { ErrorContext } from '../Contexts';\n\nconst Row = (props) => {\n    const history = useHistory()\n    const handleClick = () => {\n        history.push({ pathname: '/edit', oldRow: props.content, tableName: props.tableName })\n    }\n    return props.content.map((value, index) => <td className=\"pointer\" onClick={handleClick} key={index}>{value}</td>);\n}\n\nconst Table = (props) => {\n    const [tableData, setTableData] = useState()\n    const [rowsSelected, setRowsSelected] = useState([])\n    const { errorMessage, setErrorMessage, clearError } = useContext(ErrorContext)\n    const [show, setShow] = useState(false)\n    const deleteType = useRef()\n    const currentRow = useRef({})\n\n    const handleClose = () => setShow(false)\n    const handleShow = () => setShow(true)\n\n    useEffect(() => {\n        if (props.tableName) {\n            clearError()\n            readData(props.tableName, props.pageNum).then(data => {\n                if (data.error) {\n                    setErrorMessage(data.error)\n                }\n                else\n                    setTableData(data)\n            })\n        }\n    }, [props.tableName])\n\n    const updateRowsSelected = (e, row) => {\n        const oldRowsSelected = rowsSelected\n        let newRowsSelected\n        if (e.target.checked) {\n            newRowsSelected = oldRowsSelected.concat([row])\n        }\n        else {\n            newRowsSelected = oldRowsSelected.filter((current) => JSON.stringify(current) != JSON.stringify(row))\n        }\n        setRowsSelected(newRowsSelected)\n    }\n\n    const deleteRow = (row) => {\n        // let fks = tableData.metadata.pop()\n        // console.log(fks)\n        console.log(row)\n        row = currentRow.current\n        clearError()\n        removeRow({ \"table\": props.tableName, \"rows\": [row] }).then(data => {\n            if (data.error) {\n                setErrorMessage(data.error)\n            }\n            else {\n                readData(props.tableName, props.pageNum).then(data => {\n                    if (data.error) {\n                        setErrorMessage(data.error)\n                    }\n                    else\n                        setTableData(data)\n                })\n            }\n        })\n        handleClose()\n    }\n\n    const deleteAllRows = () => {\n        clearError()\n        removeAllRows(props.tableName).then(() =>\n            readData(props.tableName).then(data => {\n                if (data.error) {\n                    setErrorMessage(data.error)\n                }\n                else\n                    setTableData(data)\n            })\n        )\n        handleClose()\n    }\n\n    const deleteSelectedRows = () => {\n        // get all selected items\n        clearError()\n        removeRow({ \"table\": props.tableName, \"rows\": rowsSelected }).then(() => {\n            setRowsSelected([])\n            setTableData([])\n            readData(props.tableName).then(data => {\n                if (data.error) {\n                    setErrorMessage(data.error)\n                }\n                else\n                    setTableData(data)\n            })\n        })\n        handleClose()\n    }\n\n    const getKeys = () => {\n        const keys = tableData.metadata?.map((meta, index) => meta.name);\n        // keys.pop()\n        return keys;\n    };\n\n    const getHeader = () => {\n        const keys = getKeys();\n        return keys?.map((key, index) => <th key={index}>{key}</th>)\n    };\n\n    const getRowsData = () => {\n        const keys = getKeys();\n        return tableData.rows?.map((row, index) =>\n            <tr key={index}>\n                <Row key={index} content={row} tableName={props.tableName} />\n                <td className=\"pointer\"><Delete onClick={() => {\n                    currentRow.current = row;\n                    deleteType.current = deleteRow;\n                    tableData.metadata && handleShow();}} /></td>\n                <td>\n                    <input\n                        type=\"checkbox\"\n                        onClick={(e) => updateRowsSelected(e, row)}\n                    />\n                </td>\n            </tr>)\n    };\n\n    const getPagination = () => {\n        let { pages } = tableData;\n        let { tableName, pageNum } = props;\n        pages = parseInt(pages);\n        pageNum = pageNum ? parseInt(pageNum) : 1;\n        console.log(\"pages:\", pages, \"pageNum:\", pageNum);\n        let content = [];\n        let url = `${window.location.origin}/dashboard/${tableName}/`;\n        if (pageNum != 1)\n            content.push(<Pagination.Prev href={url + (pageNum - 1)} />);\n        if (pages < 7) {\n            for (let i = 1; i <= pages; i++) {\n                content.push(<Pagination.Item key={i} href={url + i}>{i}</Pagination.Item>);\n            }\n        }\n        else {\n            if (pageNum < 4) {\n                for (let i = 1; i <= 4; i++) {\n                    content.push(<Pagination.Item key={i} href={url + i}>{i}</Pagination.Item>);\n                }\n                let mid = Math.floor((4 + pages) / 2);\n                content.push(<Pagination.Ellipsis href={url + mid} />);\n                content.push(<Pagination.Item href={url + pages}>{pages}</Pagination.Item>);\n            }\n            else if (pages - pageNum < 3) {\n                for (let i = 1; i <= 2; i++) {\n                    content.push(<Pagination.Item key={i} href={url + i}>{i}</Pagination.Item>);\n                }\n                let mid = Math.floor((pages - 1) / 2);\n                content.push(<Pagination.Ellipsis href={url + mid} />);\n                for (let i = pages - 3; i <= pages; i++) {\n                    content.push(<Pagination.Item key={i} href={url + i}>{i}</Pagination.Item>);\n                }\n            }\n            else {\n                content.push(<Pagination.Item key={1} href={url + \"1\"}>{1}</Pagination.Item>);\n                let mid1 = Math.floor(pageNum / 2);\n                content.push(<Pagination.Ellipsis href={url + mid1} />);\n                for (let i = pageNum - 1; i <= pageNum + 1; i++) {\n                    content.push(<Pagination.Item key={i} href={url + i}>{i}</Pagination.Item>);\n                }\n                let mid2 = Math.floor((pageNum + 1 + pages) / 2);\n                content.push(<Pagination.Ellipsis href={url + mid2} />);\n                content.push(<Pagination.Item key={pages} href={url + pages}>{pages}</Pagination.Item>);\n            }\n        }\n        if (pageNum != pages)\n            content.push(<Pagination.Next href={url + (pageNum + 1)} />);\n        return (\n            <Pagination>\n                {content}\n            </Pagination>\n        )\n    }\n\n    const getPopup = () => {\n        return (\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                <Modal.Title>Confirm Delete</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Are you sure you want to delete? \n                    <br></br>\n                    (This may result in loss of related rows) \n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"danger\" onClick={deleteType.current}>\n                    Confirm\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    return (\n        <Container style={{ marginTop: 40 }}>\n            <ReactBootStrap.Table striped bordered hover>\n                <thead>\n                    <tr>{tableData && getHeader()}</tr>\n                </thead>\n                <tbody>\n                    {tableData && getRowsData()}\n                </tbody>\n            </ReactBootStrap.Table>\n            <Button variant=\"primary\" type=\"submit\" id=\"delete-all-button\" onClick={e => {\n                e.preventDefault();\n                deleteType.current = deleteAllRows;\n                handleShow();\n            }}>\n                Delete all rows</Button>\n            <Button variant=\"primary\" type=\"submit\" id=\"delete-selected-button\" onClick={e => {\n                e.preventDefault();\n                deleteType.current = deleteSelectedRows;\n                handleShow();\n            }}>\n                Delete selected rows</Button>\n            \n            {getPopup()}\n\n            <div className=\"pagination-parent\">\n                {tableData && (tableData.pages != 1) && getPagination()}\n            </div>\n        </Container>\n    );\n}\n\n// To test with sample json data\nTable.defaultProps = {\n    data: testData\n}\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Nav, Button } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport '../css/Dashboard.css'\nimport Table from './Table';\nimport { checkServerLife } from '../api';\n\nconst Dashboard = (props) => {\n    const history = useHistory()\n    const tables = JSON.parse(localStorage.getItem('dbConfig'))?.tables\n    const [tableName, setTableName] = useState(null)\n    const [pageNum, setPageNum] = useState(null)\n\n    useEffect(() => {\n        // If the server loses connection with the DB, go back to DB config screen\n        checkServerLife().then(data => {\n            if (data.error) {\n                localStorage.removeItem('dbConfigured')\n                window.location.replace('/')\n            }\n        })\n        // Going to URL with table name should result in that table's data being fetched\n        const { match: { params } } = props;\n        if (params.tableName) {\n            setTableName(params.tableName)\n            if (params.pageNum) {\n                setPageNum(params.pageNum)\n            }\n        } else if (tables) {\n            // When URL does not specify a table, display the first table\n            setTableName(tables[0])\n        }\n    }, []);\n\n    const editRow = (rowData) => {\n        window.location.href = `${window.location.href}dashboard/edit`\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col xs={2} id=\"sidebar-wrapper\">\n                    <Nav className=\"col-md-12 d-none d-md-block bg-dark sidebar\"\n                        activeKey=\"/home\">\n                        <div className=\"sidebar-sticky\"></div>\n                        {tables && tables.map((curr, index) =>\n                            <Nav.Item key={index}>\n                                <Nav.Link href={`/dashboard/${curr}`}>{curr}</Nav.Link>\n                            </Nav.Item>\n                        )}\n                    </Nav>\n                </Col>\n                <Col xs={10} id=\"page-content-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" id=\"create-button\" onClick={e => {\n                        e.preventDefault();\n                        history.push({ pathname: '/create', tableName: tableName })\n                    }}>\n                        Add Row\n                    </Button>\n                    <Table tableName={tableName} pageNum={pageNum} />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Dashboard;\n","import React, { useContext, useEffect, useState, useMemo } from 'react';\nimport { Form, Button, Container, Card } from 'react-bootstrap';\nimport { fetchMetaData, createData, updateData } from '../api';\nimport '../css/forms.css';\nimport { FormContext, ErrorContext } from '../Contexts';\n\nconst getInputType = (type) => {\n    if (type.includes(\"char\") || type.includes(\"text\") || type.includes(\"binary\") || type.includes(\"blob\")) {\n        return \"text\";\n    }\n    if (type.includes(\"integer\") || type.includes(\"float\") || type.includes(\"decimal\") || type.includes(\"bit\") || type.includes(\"int\") || type.includes(\"double\") || type.includes(\"year\")) {\n        return \"number\";\n    }\n    if (type.includes(\"boolean\")) {\n        return \"checkbox\";\n    }\n    if (type.includes(\"dateandtime\") || type.includes(\"timestamp\")) {\n        return \"datetime-local\";\n    }\n    if (type.includes(\"date\")) {\n        return \"date\";\n    }\n    if (type.includes(\"time\")) {\n        return \"time\";\n    }\n    if (type.includes(\"json\")) {\n        return \"json\";\n    }\n    return '';\n}\n\n// When a data type has length greater than this, a textarea is shown instead of a single line text input.\nconst MIN_LENGTH_FOR_TEXTAREA = 21\n\nconst getMaxLength = (type) => {\n    // Special cases\n    if (type.includes(\"year\")) {\n        // Year inputs can be at most YYYY (4 characters)\n        return 4\n    }\n    if (type.includes(\"blob\")) {\n        // Blob types should always be shown in a textarea\n        return MIN_LENGTH_FOR_TEXTAREA\n    }\n    const regex = /\\(([^)]*)\\)$/;\n    const maxLength = type.match(regex);\n    return maxLength != null ? maxLength[1] : maxLength;\n}\n\n// Form Input Types\nconst InputTextField = ({ id, type, name, maxLength, value, required }) => {\n    const { handleChange } = useContext(FormContext)\n    return (\n        <input\n            id={id}\n            type={type}\n            name={name}\n            required={required}\n            maxLength={maxLength}\n            size={maxLength}\n            value={value ?? \"\"}\n            onChange={event => handleChange(id, event)}\n        />);\n}\n\nconst Checkbox = ({ id, type, name, value }) => {\n    const { handleChange } = useContext(FormContext)\n    return (\n        <input\n            id={id}\n            type={type}\n            name={name}\n            checked={value == \"1\" ? true : false}\n            onChange={event => handleChange(id, event)}\n        />);\n}\n\n\nconst TextAreaField = ({ id, type, name, maxLength, value, required }) => {\n    const { handleChange } = useContext(FormContext)\n    return (\n        <textarea\n            id={id}\n            type={type}\n            name={name}\n            required={required}\n            maxLength={maxLength}\n            size={maxLength}\n            value={value ?? \"\"}\n            onChange={event => handleChange(id, event)}\n        />);\n}\n\n\nconst AddToDBTable = (props) => {\n    const [elements, setElements] = useState(null);\n\n    const { errorMessage, setErrorMessage, clearError } = useContext(ErrorContext)\n\n    useEffect(() => {\n        if (props.table) {\n            clearError()\n            fetchMetaData({ \"table\": props.table }).then(data => {\n                if (data.error) {\n                    setErrorMessage(data.error)\n                } else {\n                    // If oldRow is passed as a prop, the form is being used for editing a row and\n                    // the values of the old row must be used to populate the form initially.\n                    if (props.oldRow) {\n                        setElements(data.metadata.map((e, index) => {\n                            e.value = props.oldRow[index]\n                            return e\n                        }))\n                    }\n                    else {\n                        setElements(data.metadata)\n                    }\n                }\n            })\n        }\n    }, [props.table]);\n\n    const handleSave = (event) => {\n        event.preventDefault();\n        let newRow = {}\n        elements.forEach(e => {\n            // Special cases\n            // Default value for checkbox should be false unless specified\n            if (e.type == \"BOOLEAN\" && e.value == \"\") {\n                e.value = false\n            }\n            newRow[e.name] = e.value\n        })\n        // An existing row is being updated\n        if (props.oldRow) {\n            let oldRow = {}\n            elements.forEach((e, index) => oldRow[e.name] = props.oldRow[index])\n            clearError()\n            updateData({ tableName: props.table, oldRow, newRow }).then(data => {\n                if (data.error) {\n                    setErrorMessage(data.error)\n                }\n                else if (data.message === \"Successfully Updated\")\n                    // Go back to the page displaying the table on successfully updating a row\n                    window.location.replace(`${window.location.origin}/dashboard/${props.table}`)\n            })\n        }\n        else {\n            clearError()\n            createData({ tableName: props.table, newRow }).then(data => {\n                if (data.error) {\n                    setErrorMessage(data.error)\n                }\n                else if (data.message === \"Successfully Created\")\n                    window.location.replace(`${window.location.origin}/dashboard/${props.table}`)\n            })\n        }\n    }\n\n    const handleChange = (elementToChange, event) => {\n        const newElements = [...elements]\n        newElements.forEach(element => {\n            const { type, name } = element\n            if (elementToChange === name) {\n                switch (type) {\n                    case \"BOOLEAN\":\n                        element[\"value\"] = event.target.checked;\n                        break;\n                    default:\n                        element[\"value\"] = event.target.value;\n                }\n            }\n            setElements(newElements)\n        });\n    };\n\n    return useMemo(() => {\n        return (\n            <Container style={{ marginTop: 40 }}>\n                <Card>\n                    <Card.Body>\n                        <FormContext.Provider value={{ handleChange }}>\n                            <Form>\n                                {console.log(\"Elements:\", elements)}\n                                {elements ? elements.map((column, index) => {\n                                    console.log(\"Type:\", column.type)\n                                    const formType = getInputType(column.type.toLowerCase())\n                                    const maxLength = getMaxLength(column.type.toLowerCase());\n                                    const value = column.value ? column.value : null\n                                    const name = column.name\n                                    const required = !column.nullable\n                                    let inputField;\n                                    if (maxLength != null && maxLength >= MIN_LENGTH_FOR_TEXTAREA) {\n                                        inputField = <TextAreaField\n                                            key={name}\n                                            id={name}\n                                            type={formType}\n                                            name={name}\n                                            maxLength={maxLength}\n                                            value={value}\n                                            required={required}\n                                        />;\n                                    }\n                                    // TODO: When type is JSON, use an input field that supports JSON formatting\n                                    else if (formType == \"json\") {\n                                        inputField = <TextAreaField\n                                            key={name}\n                                            id={name}\n                                            type={formType}\n                                            name={name}\n                                            maxLength={maxLength}\n                                            value={value}\n                                            required={required}\n                                        />;\n                                    }\n                                    else if (formType == \"text\" || formType == \"number\" || formType == \"datetime-local\" || formType == \"date\" || formType == \"time\") {\n                                        inputField = <InputTextField\n                                            key={name}\n                                            id={name}\n                                            type={formType}\n                                            name={name}\n                                            maxLength={maxLength}\n                                            value={value}\n                                            required={required}\n                                        />;\n                                    }\n\n                                    else if (formType == \"checkbox\") {\n                                        inputField = <Checkbox\n                                            key={name}\n                                            id={name}\n                                            type={formType}\n                                            name={name}\n                                            value={value}\n                                        />;\n                                    }\n                                    return (\n                                        <Form.Group key={index} className=\"table-form\">\n                                            <span></span>\n                                            <label key={index + 1} htmlFor={name}>{<strong>{name}</strong>}</label>\n                                            <span>{inputField}</span>\n                                        </Form.Group>);\n                                }) : null}\n                                <Button variant=\"dark\" type=\"submit\" onClick={event => handleSave(event)}>\n                                    S A V E\n                                </Button>\n                            </Form>\n                        </FormContext.Provider>\n                    </Card.Body>\n                </Card>\n            </Container>\n        );\n    }, [elements])\n}\n\n\nconst testData = [{\n    type: \"VARCHAR(30)\",\n    nullable: false,\n    default: \"testing\",\n    name: \"device_id\",\n    comment: \"Source tablet device ID\"\n}, {\n    type: \"DateAndTime\",\n    nullable: true,\n    default: null,\n    name: \"time\",\n    comment: \"Source tablet device ID\"\n}, {\n    type: \"tinyint\",\n    nullable: false,\n    default: false,\n    name: \"isSet\",\n    comment: \"Testing checkbox\"\n}, {\n    type: \"integer\",\n    nullable: false,\n    default: \"10\",\n    name: \"Number\",\n    comment: \"Testing checkbox\"\n}]\n\n// To test with sample json data\nAddToDBTable.defaultProps = {\n    metadata: testData\n}\n\n\nexport default AddToDBTable;\n","import React from 'react'\nimport AddDataToDBTable from './AddDataToDBTable'\n\nconst RowEditor = (props) => {\n    console.log(props)\n    return (\n        <div>\n            <AddDataToDBTable table={props.location.tableName} oldRow={props.location.oldRow} />\n        </div>\n    )\n}\n\nexport default RowEditor","import React from 'react'\nimport AddDataToDBTable from './AddDataToDBTable'\n\nconst RowCreator = (props) => {\n    console.log(props)\n    return (\n        <div>\n            <AddDataToDBTable table={props.location.tableName}/>\n        </div>\n    )\n}\n\nexport default RowCreator","import React, { useContext } from 'react';\nimport Alert from 'react-bootstrap/Alert'\nimport { ErrorContext } from '../Contexts';\nimport \"../css/errors.css\"\n\nconst Error = () => {\n    const { errorMessage, setErrorMessage, clearError } = useContext(ErrorContext)\n\n    return (\n        errorMessage ?\n            <div className='fixedPositionErrorBox'>\n                <Alert variant='danger' onClose={() => clearError()} dismissible>\n                    <Alert.Heading>Error</Alert.Heading>\n                    <p>\n                        {errorMessage}\n                    </p>\n                </Alert>\n            </div>\n            : null\n    )\n}\n\nexport default Error;","import { useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Login from './components/Login';\nimport ConfigForm from './components/ConfigForm';\nimport useToken from './hooks/useToken';\nimport useDBConfig from './hooks/useDBConfig';\nimport { Header } from './components/Header';\nimport Dashboard from './components/Dashboard';\nimport RowEditor from './components/RowEditor'\nimport RowCreator from './components/RowCreator'\nimport Error from './components/Error';\nimport { ErrorContext } from './Contexts';\n\nconst App = () => {\n  const { token, setToken } = useToken();\n  const { dbConfig, setDBConfig } = useDBConfig();\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Setting error message to a blank string hides the error alert.\n  // This function exists only for semantic clarity, since clearError() makes more sense\n  // than setErrorMessage('')\n  const clearError = () => {\n    setErrorMessage('');\n  }\n\n  if (!token) {\n    return (\n      <>\n        <ErrorContext.Provider value={{ errorMessage, setErrorMessage, clearError }}>\n          <Login setToken={setToken} />\n          <Error />\n        </ErrorContext.Provider>\n      </>\n    )\n  }\n  if (!JSON.parse(localStorage.getItem(\"dbConfigured\"))) {\n    return (\n      <>\n        <ErrorContext.Provider value={{ errorMessage, setErrorMessage, clearError }}>\n          <ConfigForm setDBConfig={setDBConfig} dbConfig={dbConfig} />\n          <Error />\n        </ErrorContext.Provider>\n      </>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <ErrorContext.Provider value={{ errorMessage, setErrorMessage, clearError }}>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/dashboard/:tableName?/:pageNum?\" component={Dashboard} />\n            <Route path=\"/edit\" component={RowEditor} />\n            <Route path=\"/create\" component={RowCreator} />\n            <Route path=\"/\" component={Dashboard} />\n          </Switch>\n        </BrowserRouter>\n        <Error />\n      </ErrorContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport default function useToken() {\n    const getToken = () => {\n        const tokenString = localStorage.getItem('token');\n        const userToken = JSON.parse(tokenString);\n        return userToken?.token\n    };\n\n    const [token, setToken] = useState(getToken());\n\n    const saveToken = userToken => {\n        localStorage.setItem('token', JSON.stringify(userToken));\n        setToken(userToken.token);\n    };\n\n    return {\n        setToken: saveToken,\n        token\n    }\n}","import { useState } from 'react';\n\nexport default function useDBConfig() {\n    const getDBConfig = () => {\n        const dbConfigString = localStorage.getItem('dbConfig')\n        const dbConfig = JSON.parse(dbConfigString);\n        if (dbConfig) {\n            return dbConfig;\n        }\n        return null;\n    };\n\n    const [dbConfig, setDBConfig] = useState(getDBConfig());\n\n    const saveDBConfig = dbConfig => {\n        localStorage.setItem('dbConfig', JSON.stringify(dbConfig));\n        localStorage.setItem('dbConfigured', JSON.stringify(true));\n        setDBConfig(dbConfig);\n    };\n\n    return {\n        setDBConfig: saveDBConfig,\n        dbConfig\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}